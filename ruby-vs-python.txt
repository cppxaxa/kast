“batteries included”

# java: https://stackoverflow.com/questions/6680674/can-a-java-class-add-a-method-to-itself-at-runtime =>
# http://www.jboss.org/javassist https://github.com/jboss-javassist/javassist
# python ++ scientific modules
# python ++ dynamic properties
# python ++ ironpython ok!
# python ++ type hints (py3)
# python ++ annotations
# python ++ TO/FRO bytecode, NATIVE (sometimes)
# python ++ Ast better integrated(!!) + clean!! + compile,exec,pyc emitter!!
# python ++ Constructors() interchangeable with methods, can be very handy someday, and nice
# python ++ can access variables in methods without '@' !! but need self!?
# python ++ nice list destruction a,b=[1,2] and a,b=1,2 and [a,b]=1,2 all work++
# python ++ help(function) +++ ! dir()
# python + 'in' operator
# python + named parameters
# python + py2exe
# python + ternary operator     ok = 'Yes' if condition == 'OK' else 'No'
# python + better reflection + docs (dir, help)
# python + list concatenation [a for a in b]  but NOT [1,2]-[2]
# python - combined list concatenation [a for a in I_HAVE_NO_CLUE]
# python +- functions proper(!) 1st class citizens [result: () not default]
# python +- properties ok'ish:  p=property(getter,setter)
# python +- stricter: i.e. ruby z=map[x] (NIL) vs if x in map: map[x]
# python +- python 'run' is significantly faster than slooow 'debug' mode
# python 0 no switch
# python - no "do ... until <condition>"
# python - no interfaces
# python - at least 5 different types of (incompatible) lists  https://jacobian.org/writing/hate-python/
# python -+ condition?Then:Else only via condition and Then or 'Else' trick  (todo: angle)
# python - The syntax for tuples, x, is very subtle. If you add a comma to an expression, it turns into a tuple. 1,0+2=(1,2)
# python - bizarre super(ast.ClassDef,self).__init__(*kwargs)
# python --  python2->3 mess (if survived the 2to3 mess, your code will be unusable for those who sticked with python2)
# python -- LESS FORGIVING! ValueError:  (fixable by angle? )
# python -- list.remove(x): x not in list , if string.index(x): ValueError: substring not found ETC ETC
# python -- missing SO MANY FUNCTIONS! (fixed by angle)
# python -- unsupported operand type(s) for -: 'list' and 'list', AttributeError: 'list' object has no attribute 'each' ETC **
# python (-) backtrace (huh?)
# python (-) no switch/Case
# python - annoying self. (self, : , () -> DANGEROUS!! (ok if generated?)  (fixed by angle)
# python - NO class extensions for builtins! (ok with 'macros' / subclass construction (?))
# python -- stupid list arg explosion def f(*args):pass  f(1,2,3) OK l=[1,2,3] f(*l) OK  f([1,2,3]) TUPLE([1,2,3]) WTF!
# python -- running angle ok, debugging SLOOOOOW! (same algorithm as ruby, maybe caller() is expensive?) (better with py3)
# python -- STATEMENT RESULTS IGNORED!! REPL >>> 3*3  => 9 >>> _*2 => 18 OK >>> x=2 >>> _ 18 # WAAAAHHHH!! (fixed by angle)
# python ---- variable scope nightmare!! lambdas + block variable scope !!!!! 'nonlocal' keyword :(
# python ---- explicit global/class(self) self.EVERYTHING!!! (fixed by angle)
more: http://c2.com/cgi/wiki?PythonProblems

# both ++ mixins  python:class Request(BaseRequest, AcceptMixin), ruby: include AcceptMixin
# both ++ alias neu alt  python: neu=alt def neu(): alt()
# PyPy Python written in Python, Ruby has Rubinius

# What separates a mixin from multiple inheritance? Is it just a matter of semantics?
Yes.


** ValueError: list.remove(x): x not in list
** RUBY: # (the.nodes - old_nodes).each{|n| n.invalidate}
** PYTHON: ----
	for fuck in old_nodes:
	  if fuck in nodes:
	     nodes.remove(fuck)
	nodes.each(lambda n: n.invalidate())
	# AttributeError: 'list' object has no attribute 'each' WTF -=->
	for n in the.nodes: n.invalid()


# ruby +++ better blocks + lambdas !!!:
# ruby ++ if expression works for blocks
# ruby ++ much more forgiving and convenient, i.e. z=map[x] vs if x in map: map[x]
# ruby ++ nicer string templates "Variable #{type} #{name}=#{value}"
# ruby + jruby better, class extensions
# ruby + mirah: native 'ruby' on jvm
# ruby + def 'properties'   def y; @y; end    def y=(z); @y=z; end , see (ugly) attr_reader ...
# ruby + clean function approach, e.g. def []=(index,values) ...
# ruby + nicer 'and'+'or' concatenations  a?b:c or d and raise Ex
# ruby +-: nice list destruction a,b=[1,2] and a,b=1,2 work but not [a,b]=1,2
# ruby - less modules, more beautiful language => less need for angle!
# ruby - methods less 1st class citizens than in python! ('ok' via method(:symbol), send)
# ruby 0 can't access class variables in methods without '@' !!
# ruby -- NO types/type hints!! (vs py3)
# ruby -- no annotations!
# ruby --- no nice dynamic programmatic properties:
            a.x=8  NoMethodError: undefined method `x='
            workaround: OpenStruct!!!
            workaround: def a.x; 8;end
            OR a.methods << def x; 8;end  (WOW)
            OR class << a; attr_accessor :x; end and a.x=8
            OR A.send(:attr_accessor, :x) and a.x=8 #CLASS!
            OR A.class.send(:define_method, :x, lambda{8}) #CLASS!
            OR sometimes method_missing
            OR lol: http://www.infoq.com/articles/properties-metaprogramming
            # http://rosettacode.org/wiki/Add_a_variable_to_a_class_instance_at_runtime#C.23
            # dynamic a = new System.Dynamic.ExpandoObject();
            # a.x = 1; // Adding a new property
